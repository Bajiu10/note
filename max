#!/usr/bin/env php
<?php

namespace Max;

use Max\Config\Repository;
use Max\Console\Application;
use Max\Di\Container;
use Max\Di\Context;
use Max\Di\ReflectionManager;
use Max\Di\Scanner;
use Max\Env\Env;
use Max\Env\Loader\IniFileLoader;
use Max\Event\Annotations\Listen;
use Max\Event\Contracts\ListenerProviderInterface;
use Throwable;

define('BASE_BATH', __DIR__ . '/');

require './vendor/autoload.php';

/** @var Container $container */
$container = Context::getContainer();
try {
    /** @var Env $env */
    $env = $container->make(Env::class);
    $env->load(new IniFileLoader('./.env'));
    /** @var Repository $repository */
    $repository = $container->make(Repository::class);
    $repository->load(glob(base_path('config/*.php')));
    $bindings   = $repository->get('app.di.bindings', []);
    $configFile = base_path('storage/app/config.php');
    if (file_exists($configFile)) {
        $config   = require $configFile;
        $bindings = array_merge($bindings, $config['bindings'] ?? []);
    }
    foreach ($bindings ?? [] as $id => $binding) {
        $container->alias($id, $binding);
    }

    $classes = [];
    foreach (config('app.event.scanDir', []) as $dir) {
        $classes = [...$classes, ...Scanner::scanDir($dir)];
    }
    /** @var ListenerProviderInterface $listenerProvider */
    $listenerProvider = make(ListenerProviderInterface::class);
    foreach ($classes as $class) {
        $reflectClass = ReflectionManager::reflectClass($class);
        if (!empty($reflectClass->getAttributes(Listen::class))) {
            $listenerProvider->addListener(make($reflectClass->getName()));
        }
    }

    $console = new Application();
    $scanDir = [
        __DIR__ . '/app/Commands',
    ];
    foreach ($scanDir as $dir) {
        foreach (Scanner::scanDir($dir) as $class) {
            $console->add(make($class));
        }
    }
    $console->run();
} catch (Throwable $throwable) {
    exit('System crashed: ' . $throwable->getMessage());
}
